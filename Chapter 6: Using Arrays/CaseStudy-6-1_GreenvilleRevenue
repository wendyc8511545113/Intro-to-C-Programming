/*
In previous chapters, you created applications for the Greenville Idol competition.

Now, modify your version of the GreenvilleRevenue program created in Chapter 5 so that after the user enters the number of contestants in this yearâ€™s competition, the user is prompted for the appropriate number of contestant names and a code for each contestant that indicates the type of talent:

S for singing
D for dancing
M for playing a musical instrument
O for other.
Make sure that all entered codes are valid, and if not, re-prompt the user to enter a correct code. For example, if Y is input, output Y is not a valid code, and re-prompt the user until a valid code is entered.

After contestant data entry is complete, display a count of each type of talent. For example, if there were ten singers, four dancers, seven people who play musical instruments, and one in the other category, the output should be:

The types of talent are:
Singing              10
Dancing               4
Musical instrument    7
Other                 1
Then, continuously prompt the user for a talent code until the user enters a sentinel value (the uppercase character Z should be used as the sentinel value).

With each code entry, display a list of the contestants with that code, or display a message that the code is not valid and re-prompt the user. For example, if M is entered, the output might be:

Contestants with talent Musical instrument are:
Michelle
Nick
If U is entered, the output should be U is not a valid code.

In order to prepend the $ to currency values, the program will need to use the CultureInfo.GetCultureInfo method. In order to do this, include the statement using System.Globalization; at the top of your program and format the output statements as follows: 
WriteLine("This is an example: {0}", value.ToString("C", CultureInfo.GetCultureInfo("en-US")));
*/

using System;
using System.Collections.Generic;

class GreenvilleRevenue
{
    static void Main()
    {
        // Prompt for the number of contestants
        Console.Write("Enter the number of contestants: ");
        int numberOfContestants = int.Parse(Console.ReadLine());

        // Arrays to hold contestant names and their corresponding talent codes
        string[] contestantNames = new string[numberOfContestants];
        char[] talentCodes = new char[numberOfContestants];

        // List to store contestants for each talent type
        List<string> singers = new List<string>();
        List<string> dancers = new List<string>();
        List<string> musicians = new List<string>();
        List<string> others = new List<string>();

        // Loop to get contestant names and talent codes
        for (int i = 0; i < numberOfContestants; i++)
        {
            // Prompt for contestant name
            Console.Write($"Enter the name of contestant {i + 1}: ");
            contestantNames[i] = Console.ReadLine();

            // Loop to get a valid talent code
            bool validCode = false;
            while (!validCode)
            {
                Console.Write($"Enter the talent code for {contestantNames[i]} (S = Singing, D = Dancing, M = Musical instrument, O = Other): ");
                talentCodes[i] = char.ToUpper(Console.ReadLine()[0]);

                // Validate the talent code
                switch (talentCodes[i])
                {
                    case 'S':
                        singers.Add(contestantNames[i]);
                        validCode = true;
                        break;
                    case 'D':
                        dancers.Add(contestantNames[i]);
                        validCode = true;
                        break;
                    case 'M':
                        musicians.Add(contestantNames[i]);
                        validCode = true;
                        break;
                    case 'O':
                        others.Add(contestantNames[i]);
                        validCode = true;
                        break;
                    default:
                        Console.WriteLine($"{talentCodes[i]} is not a valid code. Please enter a valid code.");
                        break;
                }
            }
        }

        // Display the count of each type of talent
        Console.WriteLine("\nThe types of talent are:");
        Console.WriteLine($"Singing              {singers.Count}");
        Console.WriteLine($"Dancing              {dancers.Count}");
        Console.WriteLine($"Musical instrument    {musicians.Count}");
        Console.WriteLine($"Other                 {others.Count}");

        // Loop to continuously prompt for a talent code and display the corresponding contestants
        while (true)
        {
            Console.Write("\nEnter a talent code (S, D, M, O) to list contestants or Z to quit: ");
            char code = char.ToUpper(Console.ReadLine()[0]);

            if (code == 'Z')
                break;

            switch (code)
            {
                case 'S':
                    Console.WriteLine("Contestants with talent Singing are:");
                    DisplayContestants(singers);
                    break;
                case 'D':
                    Console.WriteLine("Contestants with talent Dancing are:");
                    DisplayContestants(dancers);
                    break;
                case 'M':
                    Console.WriteLine("Contestants with talent Musical instrument are:");
                    DisplayContestants(musicians);
                    break;
                case 'O':
                    Console.WriteLine("Contestants with talent Other are:");
                    DisplayContestants(others);
                    break;
                default:
                    Console.WriteLine($"{code} is not a valid code.");
                    break;
            }
        }
    }

    // Helper method to display the list of contestants
    static void DisplayContestants(List<string> contestants)
    {
        if (contestants.Count == 0)
        {
            Console.WriteLine("No contestants found for this talent.");
        }
        else
        {
            foreach (var contestant in contestants)
            {
                Console.WriteLine(contestant);
            }
        }
    }
}
